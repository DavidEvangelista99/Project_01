import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

## Definicion de los parámetros
L = 1   # longitud de la cuerda
c = 1   # velocidad de propagación
T = 2   # tiempo total
dx = 0.01   # tamaño del intervalo espacial
dt = 0.01   # tamaño del intervalo temporal

## Definicion de la función que resuelve la ecuación de onda
def solve_wave_equation():
    x = np.arange(0, L+dx, dx)   # intervalo espacial
    t = np.arange(0, T+dt, dt)   # intervalo temporal
    u = np.zeros((len(t), len(x)))   # solución de la ecuación de onda
    
    # u[t,x]
    # Condición de frontera: u(0,t) = u(L,t) = 0
    u[:,0] = 0
    u[:,-1] = 0
    # Condición inicial: u(x,0) = sin(pi*x)
    u[0,:] = np.sin(np.pi*x)
    
    
    ## Resolucion de la ecuación de onda numéricamente
    for i in range(1, len(t)):
        # Calculo de la segunda derivada espacial
        d2u = np.zeros(len(x))
        for j in range(1, len(x)-1):
            d2u[j] = (u[i-1,j+1] - 2*u[i-1,j] + u[i-1,j-1])/(dx**2)
        
        # Calculo de la solución de la ecuación de onda
        u[i,:] = 2*u[i-1,:] - u[i-2,:] + c**2*dt**2*d2u
    
    return u

u = solve_wave_equation()

## Grafico de la solución de la ecuación de onda en 3D
fig = plt.figure(figsize=(10,6))
ax = fig.add_subplot(111, projection='3d')

x = np.arange(0, L+dx, dx)
t = np.arange(0, T+dt, dt)

X, T = np.meshgrid(x, t)

ax.plot_surface(X, T, u, cmap='viridis')
ax.set_xlabel('x')
ax.set_ylabel('t')
ax.set_zlabel('u(x,t)')

plt.show()
