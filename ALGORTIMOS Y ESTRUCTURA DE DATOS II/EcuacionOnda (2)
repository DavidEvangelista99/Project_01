import numpy as np
import matplotlib.pyplot as plt

# Definir los parámetros relevantes
L = 1   # longitud de la cuerda
c = 1   # velocidad de propagación
T = 2   # tiempo total
dx = 0.01   # tamaño del intervalo espacial
dt = 0.01   # tamaño del intervalo temporal

# Definir la función que resuelve y grafica la ecuación de onda
def solve_wave_equation():
    x = np.arange(0, L+dx, dx)   # intervalo espacial
    t = np.arange(0, T+dt, dt)   # intervalo temporal
    u = np.zeros((len(t), len(x)))   # solución de la ecuación de onda
    
    # Condición inicial: u(x,0) = sin(pi*x)
    u[0,:] = np.sin(np.pi*x)
    
    # Condición de contorno: u(0,t) = u(L,t) = 0
    u[:,0] = 0
    u[:,-1] = 0
    
    # Resolver la ecuación de onda numéricamente
    for i in range(1, len(t)):
        d2u = (u[i-1,:-2] - 2*u[i-1,1:-1] + u[i-1,2:])/(dx**2)
        u[i,1:-1] = 2*u[i-1,1:-1] - u[i-2,1:-1] + c**2*dt**2*d2u
    
    # Graficar la solución de la ecuación de onda
    fig, ax = plt.subplots(figsize=(10,6))
    for i in range(0, len(t), len(t)//10):
        ax.plot(x, u[i,:], label='t={:.2f}'.format(t[i]))
    
    ax.set_xlabel('x')
    ax.set_ylabel('u(x,t)')
    ax.legend()
    ax.grid(True, which='both')
    plt.show()

# Llamar a la función para resolver y graficar la ecuación de onda
solve_wave_equation()
